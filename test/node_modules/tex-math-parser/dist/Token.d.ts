export declare const enum TokenType {
    Number = 0,
    Variable = 1,
    Equals = 2,
    Plus = 3,
    Minus = 4,
    Star = 5,
    Times = 6,
    Slash = 7,
    Caret = 8,
    Comma = 9,
    Lbrace = 10,
    Rbrace = 11,
    Lparen = 12,
    Rparen = 13,
    Bar = 14,
    Amp = 15,
    Dblbackslash = 16,
    Sqrt = 17,
    Frac = 18,
    Sin = 19,
    Cos = 20,
    Tan = 21,
    Csc = 22,
    Sec = 23,
    Cot = 24,
    Arcsin = 25,
    Arccos = 26,
    Arctan = 27,
    Log = 28,
    Ln = 29,
    Pi = 30,
    E = 31,
    Begin = 32,
    End = 33,
    Matrix = 34,
    Left = 35,
    Right = 36,
    Eof = 37,
    T = 38,
    Det = 39,
    Opname = 40,
    Eigenvalues = 41,
    Eigenvectors = 42,
    Cross = 43,
    Proj = 44,
    Comp = 45,
    Norm = 46,
    Inv = 47,
    Space = 48
}
export declare const lexemeToType: {
    [key: string]: TokenType;
};
/**
 * A mapping from a token type to the operation it represents.
 * The operation is the name of a function in the mathjs namespace,
 * or of a function to be defined in scope (i.e. in the argument to math.evaluate())
 */
export declare const typeToOperation: {
    [key in TokenType]?: string;
};
interface Token {
    lexeme: string;
    type: TokenType;
    pos: number;
}
declare class Token {
    /**
       * A token in a TeX string.
       * @param {string} lexeme string literal of the token
       * @param {TokenType} type type of the token
       * @param {Number} pos position of the token in the input string
       *
       * @constructor Token
       */
    constructor(lexeme: string, type: TokenType, pos: number);
}
export default Token;
